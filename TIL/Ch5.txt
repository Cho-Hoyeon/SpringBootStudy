DBMS : 데이터베이스 관리 시스템 SW

ORM : 자바의 객체와 DB 직접 연결 프로그래밍 기법,
SQL 질의를 직접 사용하는 것이 아닌, 자바 언어를 통하여 DB에 접근 및 조작
    장점 : 객체지향적 코드 기반, 비즈니스 로직 집중, DBMS 종속성 감소, ERD 의존도 감소 및 유지보수 편의성
    단점 : 사용 난이도, 무거운 쿼리에 대한 문제

JPA : 자바에서 RDBMS 사용 방식을 정의한 인터페이스
Hibernate : JPA 인터페이스를 구현한 구현체이자, 자바용 ORM 프레임워크, 내부적으로 JDBC API 사용

Entity : DB 테이블과 직접 연결되는 객체
Entity Manager : DB와 App 사이에서 객체 관리
    Spring에서는 Entity Manager Factory 하나만 만들어서 사용
    기본적으로 단일 Bean을 사용하므로 동시성 문제 발생 가능,
    그렇기 때문에 프록시 엔티티 매니저를 이용하여, 필요시에만 실제 엔티티 매니저 사용.

    영속성 컨텍스트 : 엔티티를 저장하는 가상의 공간
        1차 캐시 : 엔티티 조회시 1차 캐시에서 데이터 조회 후 값(엔티티) 반환, 없다면 그 때 DB에서 조회, 검색속도 향상
        쓰기 지연 : 트랜잭션 커밋 전까지 쿼리를 모았다가, 한번에 실행, DBMS 부담 감소
        변경 감지 : 트랜잭션 커밋 시 1차 캐시 저장값과 현재 값 비교하여 변경된 값을 자동으로 DB에 반영, DBMS 부담 감소
        지연 로딩 : 쿼리로 요청한 데이터를 필요시 조회

        공통적으로 DB 접근을 초소화하여 성능을 향상시키려는 목적을 가짐.

엔티티의 상태
    분리 : 관리 X
    관리 : 관리 O
    비영속
    삭제

Spring Data JPA : 스프링 데이터의 공통 기능에서 JPA의 유용한 기술 추가, JPA를 쓰기 편하게 만들어 놓은 모듈